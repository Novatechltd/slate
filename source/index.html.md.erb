---
title: Novatech API Documentation

language_tabs: # must be one of https://git.io/vQNgJ
  - shell: cURL
  - python: Python
  - go: Go

toc_footers:
  - <p>Speak to your Novatech Account<br />Manager to setup an API account.</p>
  - <a href='https://github.com/lord/slate'>Documentation Powered by Slate</a>

includes:
  - errors

search: true
---

# Introduction

Welcome to the Novatech API. You can use our API to access Novatech API endpoints, which will allow you to query current stock levels, place orders, as well as get dispatch and tracking information on any of the orders on your account.

In order to gain access to this API you will need to speak with your Novatech Account Manager, who can arrange for your account to be API enabled.

You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

# Authentication

The Novatech API uses [JSON Web Tokens](https://jwt.io/) to authenticate your access. In order to generate a token your account will need to be API enabled, upon which you will be given a username and password combination.

Using these credentials you authenticate to the server and receive a token. Once you have received your token, you must include it in all API requests to the server in a header that looks like the following:

`Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZWFuLndpbGxpYW1zQG5vdmF0ZWNoLmNvLnVrIiwidG9rZW4iOiIxMDNkMTFhNC1jODdhLTQxMDgtOTIwNS1jMTUxZDM4YjY3YmQiLCJleHAiOjE1MzkwMDY2MjR9.19DQ_uwE5Ye1ALrwiW9o7wsMhoetUqDLQMNcFCxwtEc`

<aside class="notice">
For brevity, the authorization header will be omitted from the sidebar code examples.
</aside>

## Get Token

> To authorize, use this code:

```shell
curl --request POST \
  --url <%= config[:api_endpoint] %>/token/get \
  --header 'Content-Type: application/json' \
  --data '{ "email":"<%= config[:test_email] %>", "password":"<%= config[:test_password] %>" }'
```

```python
import requests

url = "<%= config[:api_endpoint] %>/token/get"

payload = "{ \"email\":\"<%= config[:test_email] %>\", \"password\":\"<%= config[:test_password] %>\" }"
headers = {'Content-Type': 'application/json'}

response = requests.request("POST", url, data=payload, headers=headers)

print(response.text)
```

```go
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/token/get"

	payload := strings.NewReader("{ \"email\":\"<%= config[:test_email] %>\", \"password\":\"<%= config[:test_password] %>\" }")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> Upon successful authentication you will receive back JSON structured like this:

```json
{
  "token": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJkZWFuLndpbGxpYW1zQG5vdmF0ZWNoLmNvLnVrIiwidG9rZW4iOiIxMDNkMTFhNC1jODdhLTQxMDgtOTIwNS1jMTUxZDM4YjY3YmQiLCJleHAiOjE1MzkwMDY2MjR9.19DQ_uwE5Ye1ALrwiW9o7wsMhoetUqDLQMNcFCxwtEc",
  "expires_on": "2018-10-08 14:50:24"
}
```

Use this endpoint to authenticate your user credentials and receive a token to use in all subsequent requests.

### HTTP Request

`POST <%= config[:api_endpoint] %>/token/get`

### Body Parameters

Parameter | Required? | Description
----------|----------|------------
email | yes | The username/email address for your API account
password | yes | The password for your account

<aside class="notice">
You must replace the email and password with your specific account details.
</aside>

## Change Password

> To change the password used to authenticate in order to receive a token, use this code:

```shell
curl --request POST \
  --url <%= config[:api_endpoint] %>/token/change-password \
  --header 'Content-Type: application/json' \
  --data '{ "email": "<%= config[:test_email] %>", "current_password": "<%= config[:test_password] %>", "new_password": "AnEvenLongerAndMoreSecurePasswordThanBefore" }'
```

```python
import requests

url = "<%= config[:api_endpoint] %>/token/change-password"

payload = "{ \"email\": \"<%= config[:test_email] %>\", \"current_password\": \"<%= config[:test_password] %>\", \"new_password\": \"AnEvenLongerAndMoreSecurePasswordThanBefore\" }"
headers = {'Content-Type': 'application/json'}

response = requests.request("POST", url, data=payload, headers=headers)

print(response.text)
```

```go
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/token/change-password"

	payload := strings.NewReader("{ \"email\": \"<%= config[:test_email] %>\", \"current_password\": \"<%= config[:test_password] %>\", \"new_password\": \"AnEvenLongerAndMoreSecurePasswordThanBefore\" }")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> Upon successful authentication, and the password being changed, you will receive back JSON structured like this:

```json
{
  "success": true
}
```

Use this endpoint to change the password associated with your account.

### HTTP Request

`POST <%= config[:api_endpoint] %>/token/change-password`

### Body Parameters

Parameter | Required | Description
----------|----------|------------
email | yes | The username/email address for your API account
current_password | yes | The current password for your account
new_password | yes | The password that you wish to change to. Min length 16, max length 50

<aside class="warning">
Changing your password will invalidate all tokens currently associated with your account, regardless of their current expiry dates.
</aside>

# Stock

## Get All Current Stock Information

```shell
curl --request GET \
  --url <%= config[:api_endpoint] %>/stock
```

```python
import requests

url = "<%= config[:api_endpoint] %>/stock"

response = requests.request("GET", url)

print(response.text)
```

```go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/stock"

	req, _ := http.NewRequest("GET", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> The above command returns JSON structured like this:

```json
{
  "skus": [
    {
      "sku": "TEST-SKU01",
      "description": "Example SKU 01",
      "stock_level": 50,
      "price": 314.99
    },
    {
      "sku": "TEST-SKU02",
      "description": "Example SKU 02",
      "stock_level": 3,
      "price": 973.67
    },
    {
      "sku": "TEST-SKU03",
      "description": "Example SKU 03",
      "stock_level": 0,
      "price": 229.04
    }
  ]
}
```

This endpoint retrieves all stock information for SKUs associated with your API account.

### HTTP Request

`GET <%= config[:api_endpoint] %>/stock`

### Query Parameters

None required.

### Response

Parameter | Description
----------|------------
skus | An array of JSON objects containing stock information
sku | The SKU of the product
description | The description of the product
stock_level | The current level of free stock available for ordering
price | The price of the product excluding VAT

<aside class="notice">
Remember to include your authentication header!
</aside>

## Get Information on a Specific SKU

```shell
curl --request GET \
  --url <%= config[:api_endpoint] %>/stock/TEST-SKU01
```

```python
import requests

url = "<%= config[:api_endpoint] %>/stock/TEST-SKU01"

response = requests.request("GET", url)

print(response.text)
```

```go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/stock/TEST-SKU01"

	req, _ := http.NewRequest("GET", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> The above command returns JSON structured like this:

```json
{
  "sku": "TEST-SKU01",
  "description": "Example SKU 01",
  "stock_level": 50,
  "price": 314.99
}
```

This endpoint retrieves current information about a specific SKU.

### HTTP Request

`GET <%= config[:api_endpoint] %>/stock/<SKU>`

### URL Parameters

Parameter | Description
--------- | -----------
SKU | The SKU of the product you wish to receive current information for.

### Response

Parameter | Description
----------|------------
sku | The SKU of the product
description | The description of the product
stock_level | The current level of free stock available for ordering
price | The price of the product excluding VAT

# Orders

## Place an Order

```shell
curl --request POST \
  --url <%= config[:api_endpoint] %>/order \
  --header 'Content-Type: application/json' \
  --data '
{
  "order_number": "MONZ0001",
  "deliver_to": {
    "name": "Lindy Bishop",
    "address_lines": [
      "38 Finsbury Square",
      "London"
    ],
    "postal_code": "EC2A 1PX",
    "email_address": "lindy@monzo.com",
    "phone_number": "+448008021456"
  },
  "order_lines": [
    {
      "sku": "TEST-SKU01",
      "quantity": 1
    },
    {
      "sku": "TEST-SKU02",
      "quantity": 2
    }
  ]
} '
```

```python
import requests

url = "<%= config[:api_endpoint] %>/order"

payload = "\n{\n  \"order_number\": \"MONZ0001\",\n  \"deliver_to\": {\n     \"name\": \"Lindy Bishop\",\n     \"address_lines\": [\n       \"38 Finsbury Square\",\n       \"London\"\n     ],\n     \"postal_code\": \"EC2A 1PX\",\n     \"email_address\": \"lindy@monzo.com\",\n     \"phone_number\": \"+448008021456\"\n  },\n  \"order_lines\": [\n    {\n      \"sku\": \"TEST-SKU01\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"TEST-SKU02\",\n      \"quantity\": 2\n    }\n  ]\n} "
headers = {'Content-Type': 'application/json'}

response = requests.request("POST", url, data=payload, headers=headers)

print(response.text)
```

```go
package main

import (
	"fmt"
	"strings"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/order"

	payload := strings.NewReader("\n{\n  \"order_number\": \"MONZ0001\",\n  \"deliver_to\": {\n     \"name\": \"Lindy Bishop\",\n     \"address_lines\": [\n       \"38 Finsbury Square\",\n       \"London\"\n     ],\n     \"postal_code\": \"EC2A 1PX\",\n     \"email_address\": \"lindy@monzo.com\",\n     \"phone_number\": \"+448008021456\"\n  },\n  \"order_lines\": [\n    {\n      \"sku\": \"TEST-SKU01\",\n      \"quantity\": 1\n    },\n    {\n      \"sku\": \"TEST-SKU02\",\n      \"quantity\": 2\n    }\n  ]\n} ")

	req, _ := http.NewRequest("POST", url, payload)

	req.Header.Add("Content-Type", "application/json")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> The above command returns JSON structured like this:

```json
{
  "trade_code": "MON024",
  "order_number": "MONZ0001",
  "novatech_order_number": 6010361,
  "order_date": "2018-10-09 09:04:00",
  "order_status": "A",
  "ex_vat_total": 722.39,
  "vat": 144.48,
  "inc_vat_total": 866.87,
  "order_lines": [
    {
      "status": "A",
      "description": "EXAMPLE SKU 01",
      "quantity": 1,
      "price": 392.05,
      "ex_vat_total": 392.05,
      "vat": 78.41,
      "inc_vat_total": 470.46,
      "sku": "TEST-SKU01"
    },
    {
      "status": "A",
      "description": "EXAMPLE SKU 02",
      "quantity": 2,
      "price": 165.17,
      "ex_vat_total": 330.34,
      "vat": 66.07,
      "inc_vat_total": 396.41,
      "sku": "TEST-SKU02"
    },
    {
      "status": "A",
      "description": "*         ** NEXT DAY **",
      "quantity": 1,
      "price": 0,
      "ex_vat_total": 0,
      "vat": 0,
      "inc_vat_total": 0,
      "sku": "DELI01"
    }
  ]
}
```

This endpoint will place an order with Novatech on your credit account.

### HTTP Request

`POST <%= config[:api_endpoint] %>/order`

### Body Parameters

Parameter | Required |  Description
----------|----------|------------
order_number| yes | Your purchase order reference. Max length 14
deliver_to | yes | JSON object containing delivery information
name | yes | The name of the person the order is to be delivered to. Min length 5, max length 30
address_lines | yes | An array of address lines. There must be at least one line in the array. Max length 30, max number of lines 4
postal_code | yes | The post code of the address for delivery. Max length 8
email_address | yes | The email address of the recipient. Max length 254
phone_number | yes | The phone number of the recipient. Max length 30
order_lines | yes | An array of JSON objects identifying which products and their quantity you wish to order. There must be at least one object in the array.
sku | yes | The SKU of the product you wish to order. Max length 10
quantity | yes | The quantity of the SKU you wish to order. Min 1

### Response

Parameter | Description
----------|------------
trade_code | Novatech's internal code for your credit account
order_number | Your purchase order number that you passed in with the order request
novatech_order_number | Our unique order number. You will need this to lookup information on the order later
order_date | The date the order was placed on our system
order_status | The current status of the order. A detailed list of order statuses is given below
ex_vat_total | The ex VAT total of the order
vat | The amount of VAT payable on the order
inc_vat_amount | The inc VAT total of the order
order_lines | An array of JSON objects detailing each line on the order
status | The current status of the order line. A detailed list of order line statuses is given below
description | The description of the product on this order line
quantity | The quantity of product ordered on this line
price | The ex VAT price of the product on this line
ex_vat_total | The total ex VAT price of the product on this line i.e. quantity * price
vat | The amount of VAT payable on this order line
inc_vat_total | The inc VAT total amount of the product on this line i.e. quantity * (price + vat)
sku | The product SKU on this order line

### Order Statuses

Status | Description
-------|------------
A | All stock on the order is allocated and is awaiting approval for invoicing
B | One or more items is currently out of stock
D | The order has been deleted
H | The order is on Hold. Speak with your account manager
I | The order has invoiced

### Order Line Statuses

Status | Description
-------|------------
A | The line is fully allocated and awaiting invoicing
B | The item on this line is currently out of stock
P | Partially allocated stock. We do not have enough stock to fulfill the total quantity on this line
H | The line is on Hold. Speak with your account manager
I | The line has invoiced
D | The line has been deleted

## Get All Orders Summary

```shell
curl --request GET \
  --url <%= config[:api_endpoint] %>/orders
```

```python
import requests

url = "<%= config[:api_endpoint] %>/orders"

response = requests.request("GET", url)

print(response.text)
```

```go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/orders"

	req, _ := http.NewRequest("GET", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> The above command returns JSON structured like the following:

```json
{
  "orders": [
    {
      "order_number": "MONZ0003"
      "novatech_order_number": 6010361
      "order_date" : "2018-10-24 10:40:00",
      "order_status": "A"
    },
    {
      "order_number": "MONZ0002"
      "novatech_order_number": 6010360
      "order_date" : "2018-10-23 11:43:00",
      "order_status": "I"
    },
    {
      "order_number": "MONZ0001"
      "novatech_order_number": 6010359
      "order_date" : "2018-10-21 09:05:00",
      "order_status": "I"
    }
  ]
}
```

This endpoint allows to pull down a summary list of all the orders you have placed with Novatech (up to the last 500).

### HTTP Request

`GET <%= config[:api_endpoint] %>/orders`

### Response

Parameter | Description
----------|------------
orders | An array of JSON objects summarising each order placed with Novatech on your account
order_number | Your purchase order number that you passed in with the order request
novatech_order_number | Our unique order number. You will need this to lookup information on the order later
order_date | The date the order was placed on our system
order_status | The current status of the order. A detailed list of order statuses is given in the place order section

## Lookup Order Information

```shell
curl --request GET \
  --url <%= config[:api_endpoint] %>/order/6010361
```

```python
import requests

url = "<%= config[:api_endpoint] %>/order/6010361"

response = requests.request("GET", url)

print(response.text)
```

```go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/order/6010361"

	req, _ := http.NewRequest("GET", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> The above command returns JSON structured like this:

```json
{
  "trade_code": "MON024",
  "order_number": "MONZ0001",
  "novatech_order_number": 6010361,
  "order_date": "2018-10-09 09:04:00",
  "order_status": "A",
  "ex_vat_total": 722.39,
  "vat": 144.48,
  "inc_vat_total": 866.87,
  "order_lines": [
    {
      "status": "A",
      "description": "EXAMPLE SKU 01",
      "quantity": 1,
      "price": 392.05,
      "ex_vat_total": 392.05,
      "vat": 78.41,
      "inc_vat_total": 470.46,
      "sku": "TEST-SKU01"
    },
    {
      "status": "A",
      "description": "EXAMPLE SKU 02",
      "quantity": 2,
      "price": 165.17,
      "ex_vat_total": 330.34,
      "vat": 66.07,
      "inc_vat_total": 396.41,
      "sku": "TEST-SKU02"
    },
    {
      "status": "A",
      "description": "*         ** NEXT DAY **",
      "quantity": 1,
      "price": 0,
      "ex_vat_total": 0,
      "vat": 0,
      "inc_vat_total": 0,
      "sku": "DELI01"
    }
  ],
  "dispatch_info": [
    {
      "dispatch_number": 3089457,
      "dispatch_date": "2018-10-09 00:00:00",
      "box_number": 1,
      "item_number": 3,
      "courier_service": "ParcelForce",
      "tracking_url": "https://www.parcelforce.com/track-trace?trackNumber=NX1212121"
    }
  ],
  "tracking_info": [
    {
      "sku": "TEST-SKU01",
      "track_no": 12006527,
      "date_tracked": "2018-10-09 13:20:34"
    },
    {
      "sku": "TEST-SKU02",
      "track_no": 11824374,
      "serial_no": "7441474-001",
      "date_tracked": "2018-10-09 13:20:34"
    },
    {
      "sku": "TEST-SKU02",
      "track_no": 11824374,
      "serial_no": "7441474-002",
      "date_tracked": "2018-10-09 13:20:34"
    }
  ]
}
```

This endpoint allows you to lookup detailed information on any order placed on your credit account.

### HTTP Request

`GET <%= config[:api_endpoint] %>/order/<ORD_NO>`

### URL Parameters

Parameter | Description
--------- | -----------
ORD_NO | Novatech's order number you received when you placed the order

### Response

The main body of the response is the same as detailed above when placing an order, however it may contain some extra information if the order has invoiced and dispatched. If the order has not yet invoiced and dispatched then these fields will not be present.

Parameter | Description
----------|------------
dispatch_info | A JSON object containg information about the dispatch of the order. The information may not be available
dispatch_number | Novatech internal dispatch ID
dispatch_date | The date the parcel was dispatched
box_number | The box number of the parcel
item_number | The number of items in the box
courier_service | Which courier service was used to dispatch the goods
tracking_url | Depending on the courier service a tracking URL may be provided to allow you to track your parcel
tracking_info | A JSON object containing tracking information of the goods on the order i.e serial numbers
sku | The sku of the product which was tracked
track_no | Novatech internal tracking number
serial_no | The serial number of the product
date_tracked | The date the item was scanned

<aside class="notice">
Please note that the dispatch_info, tracking_url, tracking_info, and serial_no fields may not be present.
</aside>

# Audit Log

## Get Audit Log

```shell
curl --request GET \
  --url <%= config[:api_endpoint] %>/audit
```

```python
import requests

url = "<%= config[:api_endpoint] %>/audit"

response = requests.request("GET", url)

print(response.text)
```

```go
package main

import (
	"fmt"
	"net/http"
	"io/ioutil"
)

func main() {

	url := "<%= config[:api_endpoint] %>/audit"

	req, _ := http.NewRequest("GET", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}
```

> This endpoint returns JSON structured like this:

```json
{
  "audit_log": [
    {
      "timestamp": "2018-10-24 11:40:00",
      "email": "<%= config[:test_email] %>",
      "action": "Placed order: 6010362"
    },
    {
      "timestamp": "2018-10-24 11:25:00",
      "email": "<%= config[:test_email] %>",
      "action": "Performed Stock Check"
    },
    {
      "timestamp": "2018-10-24 11:21:00",
      "email": "<%= config[:test_email] %>",
      "action": "Login: Success"
    },
    {
      "timestamp": "2018-10-24 11:20:00",
      "email": "<%= config[:test_email] %>",
      "action": "Login: Failure"
    }
  ]
}
```

This endpoint allows you to request a list of all actions carried out through the API by your account.

### HTTP Request

`GET <%= config[:api_endpoint] %>/audit/<ROWS>`

### URL Parameters

Parameter | Required? | Description
----------|-----------|------------
ROWS | no | The number of rows you want returned. Defaults to 500 if not supplied

### Response

Parameter | Description
----------|------------
timestamp | The time when the action occured
email | The username / email that carried out the action
action | The action that was carried out

